{"version":3,"file":"static/js/501.98b832d4.chunk.js","mappings":"+QAEaA,EAAaC,EAAAA,GAAAA,KAAH,uGAOVC,EAASD,EAAAA,GAAAA,OAAH,yC,SCDbE,EAAaC,EAAAA,GAAW,CAC5BC,MAAOD,EAAAA,KACJE,SAAS,6BACTC,QAAQ,kCAFJ,eAGPC,SAAUJ,EAAAA,KAAaE,SAAS,kCA8ClC,EA3CkB,WAChB,IAAMG,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAAEN,MAAO,GAAIG,SAAU,IACtCI,iBAAkBT,EAClBU,SAAU,SAAAC,GACRC,GAASC,EAAAA,EAAAA,IAAMF,GAChB,IAGGC,GAAWE,EAAAA,EAAAA,MACjB,OACE,UAACjB,EAAD,CAAYa,SAAUJ,EAAOS,aAA7B,WACE,4BACE,SAACC,EAAA,EAAD,CACEC,aAAa,KACbC,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,MAAOf,EAAOK,OAAOT,MACrBoB,SAAUhB,EAAOiB,aACjBC,OAAQlB,EAAOmB,WACfC,MAAOpB,EAAOqB,QAAQzB,OAAS0B,QAAQtB,EAAOuB,OAAO3B,OACrD4B,WAAYxB,EAAOqB,QAAQzB,OAASI,EAAOuB,OAAO3B,WAGtD,4BACE,SAACc,EAAA,EAAD,CACEC,aAAa,KACbC,KAAK,WACLC,KAAK,WACLC,MAAM,WACNC,MAAOf,EAAOK,OAAON,SACrBiB,SAAUhB,EAAOiB,aACjBC,OAAQlB,EAAOmB,WACfC,MAAOpB,EAAOqB,QAAQtB,UAAYuB,QAAQtB,EAAOuB,OAAOxB,UACxDyB,WAAYxB,EAAOqB,QAAQtB,UAAYC,EAAOuB,OAAOxB,cAGzD,SAACN,EAAD,CAAQmB,KAAK,SAAb,sBAGL,C","sources":["pages/LogIn.styled.js","pages/LogInForm.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const StyledForm = styled.form`\n  padding: 20px 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Button = styled.button`\n  width: 222px;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField } from '@mui/material';\nimport { Button, StyledForm } from './LogIn.styled';\n\nconst userSchema = Yup.object({\n  email: Yup.string()\n    .required('Email is a required field')\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, `Wrong email`),\n  password: Yup.string().required('Password is a required field'),\n});\n\nconst LogInForm = () => {\n  const formik = useFormik({\n    initialValues: { email: '', password: '' },\n    validationSchema: userSchema,\n    onSubmit: values => {\n      dispatch(logIn(values));\n    },\n  });\n\n  const dispatch = useDispatch();\n  return (\n    <StyledForm onSubmit={formik.handleSubmit}>\n      <label>\n        <TextField\n          autoComplete=\"on\"\n          type=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n      </label>\n      <label>\n        <TextField\n          autoComplete=\"on\"\n          type=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n      </label>\n      <Button type=\"submit\">Log In</Button>\n    </StyledForm>\n  );\n};\n\nexport default LogInForm;\n"],"names":["StyledForm","styled","Button","userSchema","Yup","email","required","matches","password","formik","useFormik","initialValues","validationSchema","onSubmit","values","dispatch","logIn","useDispatch","handleSubmit","TextField","autoComplete","type","name","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText"],"sourceRoot":""}