{"version":3,"file":"static/js/299.bc0b4a1b.chunk.js","mappings":"qQAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mFAMVE,EAAQF,EAAAA,GAAAA,MAAH,8C,SCDZG,EAAaC,EAAAA,GAAW,CAC5BC,KAAMD,EAAAA,KACHE,SAAS,4BACTC,QACC,yHAHE,+DAMNC,MAAOJ,EAAAA,KACJE,SAAS,6BACTC,QAAQ,kCAFJ,eAGPE,SAAUL,EAAAA,KAAaE,SAAS,kCA2FlC,EAxFqB,WACnB,IAAMI,GAAWC,EAAAA,EAAAA,MASjB,OACE,0BACE,SAAC,KAAD,CACEC,cAAe,CAAEP,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDI,iBAAkBV,EAClBW,SAAU,SAAAC,GACRL,GAASM,EAAAA,EAAAA,IAASD,IAClBE,QAAQC,IAAIH,EACb,EANH,SAQG,gBAAGI,EAAH,EAAGA,aAAH,OACC,UAACpB,EAAD,CAAYe,SAAUK,EAAtB,WACE,UAACjB,EAAD,YACE,iCAaA,SAAC,KAAD,CAAOG,KAAK,OAAOe,KAAK,UACxB,SAAC,KAAD,CAAcf,KAAK,OAAOgB,UAAU,YAEtC,UAACnB,EAAD,YACE,mCAaA,SAAC,KAAD,CAAOG,KAAK,QAAQe,KAAK,WACzB,SAAC,KAAD,CAAcf,KAAK,QAAQgB,UAAU,YAEvC,UAACnB,EAAD,YAeE,qCACA,SAAC,KAAD,CAAOG,KAAK,WAAWe,KAAK,cAC5B,SAAC,KAAD,CAAcf,KAAK,WAAWgB,UAAU,YAE1C,mBACEC,UAAU,sEACVF,KAAK,SAFP,uBAvDH,KAkER,C","sources":["pages/RegisterForm.styled.js","pages/RegisterForm.js"],"sourcesContent":["import { styled } from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Label = styled.label`\n  font-weight: bold;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n// import { TextField } from '@mui/material';\nimport { StyledForm, Label } from './RegisterForm.styled';\n\nconst userSchema = Yup.object({\n  name: Yup.string()\n    .required('Name is a required field')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      `Name may contain only letters, apostrophe, dash and spaces.`\n    ),\n  email: Yup.string()\n    .required('Email is a required field')\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, `Wrong email`),\n  password: Yup.string().required('Password is a required field'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  // const formik = useFormik({\n  //   initialValues: { name: '', email: '', password: '' },\n  //   validationSchema: userSchema,\n  //   onSubmit: values => {\n  //     dispatch(register(values));\n  //     console.log(values);\n  //   },\n  // });\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={userSchema}\n        onSubmit={values => {\n          dispatch(register(values));\n          console.log(values);\n        }}\n      >\n        {({ handleSubmit }) => (\n          <StyledForm onSubmit={handleSubmit}>\n            <Label>\n              <p>Name</p>\n              {/* <TextField\n                autoComplete=\"on\"\n                className=\"border-slate-400 border-2 rounded-md p-2\"\n                type=\"text\"\n                name=\"name\"\n                label=\"Name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={formik.touched.name && formik.errors.name}\n              /> */}\n              <Field name=\"name\" type=\"text\" />\n              <ErrorMessage name=\"name\" component=\"div\" />\n            </Label>\n            <Label>\n              <p>E-mail</p>\n              {/* <TextField\n                autoComplete=\"on\"\n                // className=\"border-slate-400 border-2 rounded-md p-2\"\n                type=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              /> */}\n              <Field name=\"email\" type=\"email\" />\n              <ErrorMessage name=\"email\" component=\"div\" />\n            </Label>\n            <Label>\n              {/* <TextField\n                autoComplete=\"on\"\n                // className=\"border-slate-400 border-2 rounded-md p-2\"\n                type=\"password\"\n                name=\"password\"\n                label=\"Password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={\n                  formik.touched.password && Boolean(formik.errors.password)\n                }\n                helperText={formik.touched.password && formik.errors.password}\n              /> */}\n              <p>Password</p>\n              <Field name=\"password\" type=\"password\" />\n              <ErrorMessage name=\"password\" component=\"div\" />\n            </Label>\n            <button\n              className=\"w-[100px] bg-slate-400 rounded-lg p-2 text-white hover:bg-slate-600\"\n              type=\"submit\"\n            >\n              Sign Up\n            </button>\n          </StyledForm>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n"],"names":["StyledForm","styled","Form","Label","userSchema","Yup","name","required","matches","email","password","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","register","console","log","handleSubmit","type","component","className"],"sourceRoot":""}