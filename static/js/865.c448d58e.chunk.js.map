{"version":3,"file":"static/js/865.c448d58e.chunk.js","mappings":"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","sources":["components/Contacts/ContactsListItem.jsx","redux/contacts/selectors.js","redux/filter/selectors.js","components/Contacts/ContactsList.jsx","components/PhoneBookForm/PhoneBookForm.styled.js","components/PhoneBookForm/PhoneBookForm.jsx","redux/filter/slice.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactsListItem = ({ contact }) => {\n  const { id, name, phone } = contact;\n\n  const dispatch = useDispatch();\n  const handleDeleteContact = contactId => dispatch(deleteContact(contactId));\n\n  return (\n    <li>\n      <p>\n        {name}: {phone}\n      </p>\n      <button onClick={() => handleDeleteContact(id)}>Delete</button>\n    </li>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    if (filter?.trim()) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n      );\n    }\n\n    return contacts;\n  }\n);\n","export const selectFilter = state => state.filter;\n","import { useEffect } from 'react';\nimport { ContactsListItem } from './ContactsListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { getContacts } from 'redux/contacts/operations';\n// import { ToastContainer } from 'react-toastify';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const filteredContacts = useSelector(selectVisibleContacts);\n  return (\n    <>\n      <ul>\n        {filteredContacts.length > 0 &&\n          filteredContacts.map(contact => {\n            return <ContactsListItem key={contact.id} contact={contact} />;\n          })}\n      </ul>\n      {filteredContacts.length === 0 && <p>No contacts are available</p>}\n    </>\n  );\n};\n","import { styled } from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Label = styled.label`\n  font-weight: bold;\n`;\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { StyledForm, Label } from './PhoneBookForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst AddSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Required')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .required('Required')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const PhoneBookForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const addNewContact = newContact => {\n    const isInContacts = contacts.filter(contact => {\n      return newContact.name === contact.name;\n    }).length;\n\n    if (isInContacts) {\n      alert(`${newContact.name} is already in your contacts`);\n      return;\n    }\n    dispatch(addContact({ ...newContact }));\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={AddSchema}\n        onSubmit={contact => {\n          const newContact = {\n            ...contact,\n          };\n          addNewContact(newContact);\n        }}\n      >\n        {({ handleSubmit }) => (\n          <StyledForm onSubmit={handleSubmit}>\n            <Label>\n              <p>Name</p>\n              <Field name=\"name\" type=\"text\" />\n              <ErrorMessage name=\"name\" component=\"div\" />\n            </Label>\n            <Label>\n              <p>Number</p>\n              <Field name=\"number\" type=\"tel\" />\n              <ErrorMessage name=\"number\" component=\"div\" />\n            </Label>\n            <button type=\"submit\">Add contact</button>\n          </StyledForm>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","const { createSlice } = require('@reduxjs/toolkit');\n\nconst initialState = '';\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    change(state, action) {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleFilterChange = event => {\n    const value = event.target.value;\n    dispatch(setFilter(value));\n  };\n  return (\n    <div>\n      <input\n        id=\"outlined-basic\"\n        label=\"search\"\n        variant=\"outlined\"\n        onChange={handleFilterChange}\n        placeholder=\"Find contact by name\"\n      />\n    </div>\n  );\n};\n","import { ContactsList } from 'components/Contacts/ContactsList';\nimport { PhoneBookForm } from 'components/PhoneBookForm/PhoneBookForm';\nimport { Filter } from 'components/Filter/Filter';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  return (\n    <div>\n      <PhoneBookForm />\n      <Filter />\n      {isLoading && <p>Refreshing data...</p>}\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactsListItem","contact","id","name","phone","dispatch","useDispatch","onClick","contactId","deleteContact","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","trim","toLowerCase","includes","ContactsList","useEffect","getContacts","filteredContacts","useSelector","length","map","StyledForm","styled","Form","Label","AddSchema","Yup","shape","required","matches","number","PhoneBookForm","initialValues","validationSchema","onSubmit","newContact","alert","addContact","addNewContact","handleSubmit","type","component","filterSlice","createSlice","require","initialState","reducers","change","action","payload","setFilter","actions","Filter","reducer","label","variant","onChange","event","value","target","placeholder"],"sourceRoot":""}